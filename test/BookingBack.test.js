const assert = require('assert');
const ganache = require('ganache-cli');
const Web3 = require('web3');
// The Web3 constructor takes as argument a provider.
// A provider is a communication layer between the Ethereum network (ganache in this case) and the web3 library
//
const web3 = new Web3(ganache.provider());

const { interface, bytecode } = require('../compile');

let sc_backend;
let accounts;

// At before starting let's deploy a new instance of our contract in the Ganache test network
beforeEach(async () => {
    // Ganache creates a set of unlocked accounts for us in order to use them to deploy and operating with the contract
    // Unlocked means they don't need private keys, ecc in order to use them
    accounts = await web3.eth.getAccounts();

    // Let's use the first account to deploy the contract
    // Then compile the bytecode generated by the compile script
 sc_backend = await new web3.eth.Contract(JSON.parse(interface))  // ABI goes to the constructor of the Contract
        .deploy({ data: bytecode, arguments: [] })  // the bytecode is used for deploying the contract, if the contract constructor has some arguments they need to be passed here to the arguments keys
        .send({from: accounts[0], gas: '1000000'});  // specify the transaction which creates the contract with a gas limit of 1 million wei
});

describe('Backend contract', () => {
    it('deploys a contract', () => {
        assert.ok (sc_backend.options.address);
    });
    it('allows one account to book', async () => {
        await sc_backend.methods.book("0x1260f1639936e9Da4b032c96b9F721d6BEA1B957",12,15,"Bologna",600).send({
            from: accounts[0],
            gas: '1000000'
        });

        const booking = await sc_backend.methods.getBookingByAdd("0x1260f1639936e9Da4b032c96b9F721d6BEA1B957").call({
            from: accounts[0]
        });

        const number = await sc_backend.methods.getBookingNumber().call({
            from: accounts[0]
        });

        assert.strictEqual('1',number);
        assert.strictEqual('12', booking[0]);
        assert.strictEqual('15', booking[1]);
        assert.strictEqual("Bologna", booking[2]);
        assert.strictEqual('600', booking[3]);
    });
    it('allows more account to book', async () => {
        await sc_backend.methods.book("0x1260f1639936e9Da4b032c96b9F721d6BEA1B957",12,15,"Bologna",600).send({
            from: accounts[0],
            gas: '1000000'
        });

        await sc_backend.methods.book("0x1260f1639936e9Da4b032c96b9F721d6BEA1B957",12,15,"Bologna",600).send({
            from: accounts[0],
            gas: '1000000'
        });

        await sc_backend.methods.book("0x1260f1639936e9Da4b032c96b9F721d6BEA1B957",12,15,"Bologna",600).send({
            from: accounts[0],
            gas: '1000000'
        });

        const number = await sc_backend.methods.getBookingNumber().call({
            from: accounts[0]
        });

        assert.strictEqual('3',number);
    });
/*
    it('subscribe and receive an event from the BlOcKcHaIn', async () => {
        await sc_backend.methods.book("0x1260f1639936e9Da4b032c96b9F721d6BEA1B957",12,15,"Bologna",600).send({
            from: accounts[0],
            gas: '1000000'
        });

        var subscription = web3.eth.subscribe('logs', {
            address: '0x1260f1639936e9Da4b032c96b9F721d6BEA1B957',
            topics: ['0x12345...']
        }, function(error, result){
            if (!error)
             

        const number = await sc_backend.methods.getBookingNumber().call({
            from: accounts[0]
        });

        assert.strictEqual('3',number);
    });*/
    
});

